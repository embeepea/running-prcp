#! /usr/bin/python

import sys, re
sys.path.append('py-normals')
from StationNormals import StationNormals

s = StationNormals("USC00010008.normals.txt")

def ytd_to_daily_prcp(ytd_prcp):
    """Converts ytd precip to daily prcp.  ytd_prcp should be a 2D array of the form
    ytd_prcp[m][d], where m is the (0-based) month number and d is the (0-based) day
    number.  Returns a 2D array of the same form where the entries represent daily
    prcp amounts."""
    data = []
    prev = None
    for ytd_vals in ytd_prcp:
        daily_vals = []
        for val in ytd_vals:
            if val >= 0:
                if prev == None:
                    daily_val = val
                else:
                    daily_val = val - prev
                daily_vals.append(daily_val)
                prev = val
        data.append(daily_vals)
    return data

def daily_normal_prcp_to_running_prcp(daily_normal_prcp, N):
    """Converts a daily normal prcp array to a running total normal prcp array.  daily_normal_prcp should be
    a 2D array of the form daily_normal_prcp[m][d], where m is the (0-based) month number and d
    is the (0-based) day number.  Returns a 2D array of the same form where the entries represent running
    totals for the last N days."""
    data = [];
    # pre-populate data array with `None`s
    data = [ [None for d in m] for m in daily_normal_prcp ]
    # we use the `running` array to store the last N values while computing the running sums
    running = []
    # go through data once, populating results, skipping the first N-1 entries (leaving them None)
    for m in range(0,len(daily_normal_prcp)):
        for d in range(0,len(data[m])):
            p = daily_normal_prcp[m][d]
            if len(running) >= N:
                running.pop()
                running.insert(0,p)
            else:
                running.insert(0,p)
            if len(running) == N:
                data[m][d] = sum(running)
    # go through data one more time, to populate Nones at beginning:
    done = False
    for m in range(0,len(daily_normal_prcp)):
        if done:
            break
        for d in range(0,len(data[m])):
            if data[m][d] != None:
                done = True
                break
            p = daily_normal_prcp[m][d]
            running.pop()
            running.insert(0,p)
            data[m][d] = sum(running)
    return data

def get_daily_prcp(filename):
    """Load daily prcp data from a file containing lines like the following:
           194807,0,46,0,0,0,0,0,30,1778,358,64,168,333,41,0,142,0,0,203,0,0,0,0,20,0,0,0,356,0,13,0
           194808,91,300,36,51,0,0,0,0,36,0,0,0,M,0,130,315,0,M,0,0,0,0,0,28,0,0,0,0,0,0,0
       Returns an array containing one entry per line; each entry stores one month of data in an
       object with keys `year`, `month`, and `values'.  So, for example, a file containing
       the above two lines would be converted to the following:
           [ { 'year' : 1948, 'month' : 7, 'values' : [0,46,0,0,0,0,0,30,1778,358,64,168,333,41,0,142,0,0,203,0,0,0,0,20,0,0,0,356,0,13,0] },
             { 'year' : 1948, 'month' : 8, 'values' : [91,300,36,51,0,0,0,0,36,0,0,0,None,0,130,315,0,None,0,0,0,0,0,28,0,0,0,0,0,0,0] } ]
       Missing data values, which are indicated by 'M' in the input file, are translated to `None`
       in the returned object."""
    f = open(filename, 'r')
    data = []
    for line in f:
        line = line.strip()
        fields = re.split(r'\s*,\s*', line)
        if len(fields) < 20:
            continue
        m = re.match(r'(\d{4})(\d{2})', fields[0])
        if not m:
            continue
        year  = int(m.group(1))
        month = int(m.group(2))
        data.append({ 'year' : year, 'month' : month, 'values' : [int(x) if x!="M" else None for x in fields[1:]]})
    f.close()
    return data

def print_normal_data(data):
    for m in data:
        print " ".join([ ('***' if v is None else ("%3d" % v)) for v in m ])

def print_data(data):
    for y in data:
        print "%04d-%02d  %s" % (y['year'], y['month'], " ".join([ ('  **' if v is None else ("%4d" % v)) for v in y['values'] ]))

ytd_normal_prcp     = s.normals['Precipitation-Related']['Daily']['ytd-prcp-normal']
daily_normal_prcp   = ytd_to_daily_prcp(ytd_normal_prcp)
running_normal_prcp = daily_normal_prcp_to_running_prcp(daily_normal_prcp, 30)

daily_prcp          = get_daily_prcp('sample.prcp.dat')

print_data(daily_prcp)

### print "daily_normal_prcp:"
### print_normal_data( daily_normal_prcp )
### 
### print "running_normal_prcp:"
### print_normal_data( running_normal_prcp )
